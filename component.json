{
    "title": "AWS Certificate Manager Private Certificate Authority",
    "description": "You can use the ACM PCA API to create a private certificate authority (CA). You\nmust first call the CreateCertificateAuthority operation. If successful, the\noperation returns an Amazon Resource Name (ARN) for your private CA. Use this\nARN as input to the GetCertificateAuthorityCsr operation to retrieve the\ncertificate signing request (CSR) for your private CA certificate. Sign the CSR\nusing the root or an intermediate CA in your on-premises PKI hierarchy, and call\nthe ImportCertificateAuthorityCertificate to import your signed private CA\ncertificate into ACM PCA. \n\nUse your private CA to issue and revoke certificates. These are private\ncertificates that identify and secure client computers, servers, applications,\nservices, devices, and users over SSLS/TLS connections within your organization.\nCall the IssueCertificate operation to issue a certificate. Call the \nRevokeCertificate operation to revoke a certificate. \n\nCertificates issued by your private CA can be trusted only within your\norganization, not publicly.\n\nYour private CA can optionally create a certificate revocation list (CRL) to\ntrack the certificates you revoke. To create a CRL, you must specify a \nRevocationConfiguration object when you call the CreateCertificateAuthority \noperation. ACM PCA writes the CRL to an S3 bucket that you specify. You must\nspecify a bucket policy that grants ACM PCA write permission. \n\nYou can also call the CreateCertificateAuthorityAuditReport to create an\noptional audit report, which enumerates all of the issued, valid, expired, and\nrevoked certificates from the CA.\n\nEach ACM PCA API operation has a throttling limit which determines the number of\ntimes the operation can be called per second. For more information, see API Rate\nLimits in ACM PCA [acm-pca/latest/userguide/PcaLimits.html#PcaLimits-api] in the\nACM PCA user guide.",
    "docsUrl": "https://aws.amazon.com/acm-pca/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/acm-pca/2017-08-22/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://acm-pca.amazonaws.com/",
                    "http://acm-pca.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "CreateCertificateAuthority": {
            "main": "./lib/actions/CreateCertificateAuthority.js",
            "title": "CreateCertificateAuthority",
            "description": "Creates a private subordinate certificate authority (CA). You must specify the CA configuration, the revocation configuration, the CA type, and an optional idempotency token. The CA configuration specifies the name of the algorithm and key size to be used to create the CA private key, the type of signing algorithm that the CA uses to sign, and X.500 subject information. The CRL (certificate revocation list) configuration specifies the CRL expiration period in days (the validity period of the CRL), the Amazon S3 bucket that will contain the CRL, and a CNAME alias for the S3 bucket that is included in certificates issued by the CA. If successful, this operation returns the Amazon Resource Name (ARN) of the CA.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateCertificateAuthority.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateCertificateAuthorityAuditReport": {
            "main": "./lib/actions/CreateCertificateAuthorityAuditReport.js",
            "title": "CreateCertificateAuthorityAuditReport",
            "description": "Creates an audit report that lists every time that the your CA private key is used. The report is saved in the Amazon S3 bucket that you specify on input. The <a>IssueCertificate</a> and <a>RevokeCertificate</a> operations use the private key. You can generate a new report every 30 minutes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateCertificateAuthorityAuditReport.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteCertificateAuthority": {
            "main": "./lib/actions/DeleteCertificateAuthority.js",
            "title": "DeleteCertificateAuthority",
            "description": "Deletes a private certificate authority (CA). You must provide the ARN (Amazon\nResource Name) of the private CA that you want to delete. You can find the ARN\nby calling the ListCertificateAuthorities operation. Before you can delete a CA,\nyou must disable it. Call the UpdateCertificateAuthority operation and set the \nCertificateAuthorityStatus parameter to DISABLED. \n\nAdditionally, you can delete a CA if you are waiting for it to be created (the \nStatus field of the CertificateAuthority is CREATING). You can also delete it if\nthe CA has been created but you haven't yet imported the signed certificate (the \nStatus is PENDING_CERTIFICATE) into ACM PCA. \n\nIf the CA is in one of the aforementioned states and you call \nDeleteCertificateAuthority, the CA's status changes to DELETED. However, the CA\nwon't be permentantly deleted until the restoration period has passed. By\ndefault, if you do not set the PermanentDeletionTimeInDays parameter, the CA\nremains restorable for 30 days. You can set the parameter from 7 to 30 days. The \nDescribeCertificateAuthority operation returns the time remaining in the\nrestoration window of a Private CA in the DELETED state. To restore an eligable\nCA, call the RestoreCertificateAuthority operation.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCertificateAuthority.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeCertificateAuthority": {
            "main": "./lib/actions/DescribeCertificateAuthority.js",
            "title": "DescribeCertificateAuthority",
            "description": "Lists information about your private certificate authority (CA). You specify the\nprivate CA on input by its ARN (Amazon Resource Name). The output contains the\nstatus of your CA. This can be any of the following: \n\n *   CREATING - ACM PCA is creating your private certificate authority.\n   \n   \n *   PENDING_CERTIFICATE - The certificate is pending. You must use your\n   on-premises root or subordinate CA to sign your private CA CSR and then\n   import it into PCA. \n   \n   \n *   ACTIVE - Your private CA is active.\n   \n   \n *   DISABLED - Your private CA has been disabled.\n   \n   \n *   EXPIRED - Your private CA certificate has expired.\n   \n   \n *   FAILED - Your private CA has failed. Your CA can fail because of problems\n   such a network outage or backend AWS failure or other errors. A failed CA can\n   never return to the pending state. You must create a new CA. \n   \n   \n *   DELETED - Your private CA is within the restoration period, after which it\n   is permanently deleted. The length of time remaining in the CA's restoration\n   period is also included in this operation's output.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeCertificateAuthority.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeCertificateAuthorityAuditReport": {
            "main": "./lib/actions/DescribeCertificateAuthorityAuditReport.js",
            "title": "DescribeCertificateAuthorityAuditReport",
            "description": "Lists information about a specific audit report created by calling the <a>CreateCertificateAuthorityAuditReport</a> operation. Audit information is created every time the certificate authority (CA) private key is used. The private key is used when you call the <a>IssueCertificate</a> operation or the <a>RevokeCertificate</a> operation. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeCertificateAuthorityAuditReport.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetCertificate": {
            "main": "./lib/actions/GetCertificate.js",
            "title": "GetCertificate",
            "description": "Retrieves a certificate from your private CA. The ARN of the certificate is returned when you call the <a>IssueCertificate</a> operation. You must specify both the ARN of your private CA and the ARN of the issued certificate when calling the <b>GetCertificate</b> operation. You can retrieve the certificate if it is in the <b>ISSUED</b> state. You can call the <a>CreateCertificateAuthorityAuditReport</a> operation to create a report that contains information about all of the certificates issued and revoked by your private CA. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetCertificate.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetCertificateAuthorityCertificate": {
            "main": "./lib/actions/GetCertificateAuthorityCertificate.js",
            "title": "GetCertificateAuthorityCertificate",
            "description": "Retrieves the certificate and certificate chain for your private certificate authority (CA). Both the certificate and the chain are base64 PEM-encoded. The chain does not include the CA certificate. Each certificate in the chain signs the one before it. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetCertificateAuthorityCertificate.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetCertificateAuthorityCsr": {
            "main": "./lib/actions/GetCertificateAuthorityCsr.js",
            "title": "GetCertificateAuthorityCsr",
            "description": "Retrieves the certificate signing request (CSR) for your private certificate authority (CA). The CSR is created when you call the <a>CreateCertificateAuthority</a> operation. Take the CSR to your on-premises X.509 infrastructure and sign it by using your root or a subordinate CA. Then import the signed certificate back into ACM PCA by calling the <a>ImportCertificateAuthorityCertificate</a> operation. The CSR is returned as a base64 PEM-encoded string. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetCertificateAuthorityCsr.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ImportCertificateAuthorityCertificate": {
            "main": "./lib/actions/ImportCertificateAuthorityCertificate.js",
            "title": "ImportCertificateAuthorityCertificate",
            "description": "Imports your signed private CA certificate into ACM PCA. Before you can call\nthis operation, you must create the private certificate authority by calling the \nCreateCertificateAuthority operation. You must then generate a certificate\nsigning request (CSR) by calling the GetCertificateAuthorityCsr operation. Take\nthe CSR to your on-premises CA and use the root certificate or a subordinate\ncertificate to sign it. Create a certificate chain and copy the signed\ncertificate and the certificate chain to your working directory. \n\nYour certificate chain must not include the private CA certificate that you are\nimporting.\n\nYour on-premises CA certificate must be the last certificate in your chain. The\nsubordinate certificate, if any, that your root CA signed must be next to last.\nThe subordinate certificate signed by the preceding subordinate CA must come\nnext, and so on until your chain is built. \n\nThe chain must be PEM-encoded.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ImportCertificateAuthorityCertificate.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "IssueCertificate": {
            "main": "./lib/actions/IssueCertificate.js",
            "title": "IssueCertificate",
            "description": "Uses your private certificate authority (CA) to issue a client certificate. This\noperation returns the Amazon Resource Name (ARN) of the certificate. You can\nretrieve the certificate by calling the GetCertificate operation and specifying\nthe ARN. \n\nYou cannot use the ACM ListCertificateAuthorities operation to retrieve the ARNs\nof the certificates that you issue by using ACM PCA.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/IssueCertificate.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListCertificateAuthorities": {
            "main": "./lib/actions/ListCertificateAuthorities.js",
            "title": "ListCertificateAuthorities",
            "description": "Lists the private certificate authorities that you created by using the <a>CreateCertificateAuthority</a> operation.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListCertificateAuthorities.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTags": {
            "main": "./lib/actions/ListTags.js",
            "title": "ListTags",
            "description": "Lists the tags, if any, that are associated with your private CA. Tags are labels that you can use to identify and organize your CAs. Each tag consists of a key and an optional value. Call the <a>TagCertificateAuthority</a> operation to add one or more tags to your CA. Call the <a>UntagCertificateAuthority</a> operation to remove tags. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTags.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RestoreCertificateAuthority": {
            "main": "./lib/actions/RestoreCertificateAuthority.js",
            "title": "RestoreCertificateAuthority",
            "description": "Restores a certificate authority (CA) that is in the <code>DELETED</code> state. You can restore a CA during the period that you defined in the <b>PermanentDeletionTimeInDays</b> parameter of the <a>DeleteCertificateAuthority</a> operation. Currently, you can specify 7 to 30 days. If you did not specify a <b>PermanentDeletionTimeInDays</b> value, by default you can restore the CA at any time in a 30 day period. You can check the time remaining in the restoration period of a private CA in the <code>DELETED</code> state by calling the <a>DescribeCertificateAuthority</a> or <a>ListCertificateAuthorities</a> operations. The status of a restored CA is set to its pre-deletion status when the <b>RestoreCertificateAuthority</b> operation returns. To change its status to <code>ACTIVE</code>, call the <a>UpdateCertificateAuthority</a> operation. If the private CA was in the <code>PENDING_CERTIFICATE</code> state at deletion, you must use the <a>ImportCertificateAuthorityCertificate</a> operation to import a certificate authority into the private CA before it can be activated. You cannot restore a CA after the restoration period has ended.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RestoreCertificateAuthority.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RevokeCertificate": {
            "main": "./lib/actions/RevokeCertificate.js",
            "title": "RevokeCertificate",
            "description": "Revokes a certificate that you issued by calling the <a>IssueCertificate</a> operation. If you enable a certificate revocation list (CRL) when you create or update your private CA, information about the revoked certificates will be included in the CRL. ACM PCA writes the CRL to an S3 bucket that you specify. For more information about revocation, see the <a>CrlConfiguration</a> structure. ACM PCA also writes revocation information to the audit report. For more information, see <a>CreateCertificateAuthorityAuditReport</a>. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RevokeCertificate.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TagCertificateAuthority": {
            "main": "./lib/actions/TagCertificateAuthority.js",
            "title": "TagCertificateAuthority",
            "description": "Adds one or more tags to your private CA. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. You specify the private CA on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one private CA if you want to identify a specific characteristic of that CA, or you can apply the same tag to multiple private CAs if you want to filter for a common relationship among those CAs. To remove one or more tags, use the <a>UntagCertificateAuthority</a> operation. Call the <a>ListTags</a> operation to see what tags are associated with your CA. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TagCertificateAuthority.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UntagCertificateAuthority": {
            "main": "./lib/actions/UntagCertificateAuthority.js",
            "title": "UntagCertificateAuthority",
            "description": "Remove one or more tags from your private CA. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this operation, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a private CA, use the <a>TagCertificateAuthority</a>. Call the <a>ListTags</a> operation to see what tags are associated with your CA. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UntagCertificateAuthority.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateCertificateAuthority": {
            "main": "./lib/actions/UpdateCertificateAuthority.js",
            "title": "UpdateCertificateAuthority",
            "description": "Updates the status or configuration of a private certificate authority (CA). Your private CA must be in the <code>ACTIVE</code> or <code>DISABLED</code> state before you can update it. You can disable a private CA that is in the <code>ACTIVE</code> state or make a CA that is in the <code>DISABLED</code> state active again.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateCertificateAuthority.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}